// Code generated by goagen v1.5.10, DO NOT EDIT.
//
// API "goa-sample": Application Contexts
//
// Command:
// $ main

package app

import (
	"context"
	goa "github.com/shogo82148/goa-v1"
	"net/http"
)

// GetUserContext provides the user get action context.
type GetUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID string
}

// NewGetUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller get action.
func NewGetUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["user_id"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		rctx.UserID = rawUserID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetUserContext) OK(r *UserMedia) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user_media+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetUserContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *GetUserContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}
